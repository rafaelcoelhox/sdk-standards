#!/bin/bash
# Script para aplicar padr√µes a um SDK existente da AbacatePay
# Uso: ./scripts/setup-existing-sdk.sh nome-do-repositorio

# Verificar se foi fornecido um nome de reposit√≥rio
if [ "$#" -ne 1 ]; then
    echo "Uso: $0 <nome-do-repositorio>"
    echo "Exemplo: $0 abacatepay-nodejs-sdk"
    exit 1
fi

REPO=$1
TEMP_DIR="temp-$REPO"

echo "ü•ë Configurando padr√µes para $REPO..."

# Clone o reposit√≥rio
echo "üì¶ Clonando o reposit√≥rio..."
git clone "https://github.com/AbacatePay/$REPO.git" $TEMP_DIR
cd $TEMP_DIR

# Criar estrutura de diret√≥rios necess√°ria
echo "üìÅ Criando estrutura de diret√≥rios..."
mkdir -p .github/ISSUE_TEMPLATE
mkdir -p .github/workflows
mkdir -p docs
mkdir -p examples

# Copiar templates
echo "üìã Copiando templates de issues..."
cp ../templates/issue_templates/* .github/ISSUE_TEMPLATE/

echo "üìù Copiando template de mensagem de commit..."
cp ../.gitmessage .

echo "üìÑ Copiando documentos padr√£o..."
# N√£o sobrescrever README.md existente, apenas verificar e atualizar se necess√°rio
if [ -f "README.md" ]; then
    echo "‚ÑπÔ∏è README.md j√° existe, pulando..."
else
    echo "üìÑ Criando README.md b√°sico..."
    # Determinar a linguagem do SDK baseado no nome
    LANG=$(echo $REPO | cut -d'-' -f2)
    # Criar README b√°sico
    cp ../templates/README.md .
    # Substituir placeholders
    sed -i "s/\[LINGUAGEM\]/$LANG/g" README.md
    sed -i "s/\[sdk\]/$REPO/g" README.md
fi

# Copiar arquivos de contribui√ß√£o e seguran√ßa
cp ../CONTRIBUTING.md .
cp ../CODE_OF_CONDUCT.md .
cp ../SECURITY.md .

# Verificar se j√° existe um CHANGELOG.md
if [ ! -f "CHANGELOG.md" ]; then
    echo "üìù Criando CHANGELOG.md inicial..."
    echo "# Changelog

Todas as altera√ß√µes not√°veis neste projeto ser√£o documentadas neste arquivo.

O formato √© baseado em [Keep a Changelog](https://keepachangelog.com/pt-BR/1.0.0/),
e este projeto adere ao [Versionamento Sem√¢ntico](https://semver.org/lang/pt-BR/spec/v2.0.0.html).

## [N√£o Lan√ßado]

### Adicionado
- Configura√ß√£o inicial do projeto
" > CHANGELOG.md
fi

# Verificar se j√° existe um arquivo de licen√ßa
if [ ! -f "LICENSE" ]; then
    echo "üìú Criando arquivo de licen√ßa MIT..."
    cp ../LICENSE .
fi

# Criar ou atualizar o arquivo de configura√ß√£o do Git para usar o template de mensagem de commit
git config --local commit.template .gitmessage

# Adicionar as altera√ß√µes ao Git
echo "üîÑ Adicionando altera√ß√µes ao Git..."
git add .
git commit -m "docs: adiciona templates e documentos padr√£o"

echo "‚úÖ Configura√ß√£o conclu√≠da para $REPO!"
echo ""
echo "üöÄ Pr√≥ximos passos:"
echo "1. Revise as altera√ß√µes: cd $TEMP_DIR"
echo "2. Fa√ßa push para o reposit√≥rio remoto: git push origin main"
echo "3. Configure GitHub Actions para CI/CD"
echo ""
echo "Para configurar o template de commit em outros clones deste reposit√≥rio, use:"
echo "  git config --local commit.template .gitmessage"